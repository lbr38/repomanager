#!/usr/bin/env bash
set -u
trap 'kill 0' EXIT

# Leave a delay of 30sec to let the system start
sleep 30

SCRIPT_PATH=$(realpath $0)
DATA_DIR="/var/lib/repomanager"
LOG_DIR="$DATA_DIR/logs/service"
LOG="$LOG_DIR/repomanager-service.log"
STATS_LOG_DIR="$DATA_DIR/logs/stats"
STATS_LOG="$STATS_LOG_DIR/stats-log-parser.log"
STATS_DB="$DATA_DIR/db/repomanager-stats.db"
CURRENT_TIME=""
LAST_TIME=""
STATS_LOG_PARSING_RUNNING="no"
COUNTER="0"

# Create log dirs if not exist
mkdir -p "$LOG_DIR"
mkdir -p "$STATS_LOG_DIR"

# Check that DATA_DIR is valid by checking if repomanager configuration file exist
if [ ! -f "${DATA_DIR}/configurations/repomanager.conf" ];then
    echo "Error: Configuration file '${DATA_DIR}/configurations/repomanager.conf' not found." > "$LOG"
    exit 1
fi

# Get additionnal variables
function getVars
{
    WWW_DIR=$(grep "^WWW_DIR =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|WWW_DIR = ||g' | sed 's|"||g')
    WWW_USER=$(grep "^WWW_USER =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|WWW_USER = ||g' | sed 's|"||g')
    REPOS_DIR=$(grep "^REPOS_DIR =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|REPOS_DIR = ||g' | sed 's|"||g')
    UPDATE_BRANCH=$(grep "^UPDATE_BRANCH =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|UPDATE_BRANCH = ||g' | sed 's|"||g')

    STATS_ENABLED=$(grep "^STATS_ENABLED =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|STATS_ENABLED = ||g' | sed 's|"||g')
    # Access log file to analyze
    STATS_ACCESS_LOG_FILE=$(grep "^STATS_LOG_PATH =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|STATS_LOG_PATH = ||g' | sed 's|"||g')

    PLANS_ENABLED=$(grep "^PLANS_ENABLED =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|PLANS_ENABLED = ||g' | sed 's|"||g')
    PLAN_REMINDERS_ENABLED=$(grep "^PLAN_REMINDERS_ENABLED =" ${DATA_DIR}/configurations/repomanager.conf | sed 's|PLAN_REMINDERS_ENABLED = ||g' | sed 's|"||g')
}

# Check if this service needs to be restarted
function checkRestartNeeded
{
    if [ -f "$DATA_DIR/service.restart" ];then
        echo "A restart of this service is required. Restarting..."
        rm "$DATA_DIR/service.restart" -f
        exec systemctl --quiet restart repomanager
    fi
}

function generalChecks
{
    # Check if www user is defined
    if [ -z "$WWW_USER" ];then
        echo "Error: www user is not defined."
        exit 1
    fi

    # Check if www user is a reel unix user
    if ! grep -q "$WWW_USER" /etc/passwd;then
        echo "Error: www user is not a unix user."
        exit 1
    fi

    # Check if sudo exist
    if [ ! -f "/usr/bin/sudo" ];then
        echo "Error: sudo command not found."
        exit 1
    fi

    # Check if repos directory exists
    if [ ! -d "$REPOS_DIR" ];then
        echo "Error: Repos directory '$REPOS_DIR' not found."
        exit 1
    fi
}

# Clean temporary files and directories
function cleanUp
{
    # Clean files older than 7 days in .temp
    if [ -d "$DATA_DIR/.temp" ];then
        find "$DATA_DIR/.temp"/ -mtime +7 -exec rm -rf {} \;
    fi

    # Clean pid files older than 7 days
    if [ -d "$DATA_DIR/operations/pid/" ];then
        find "$DATA_DIR/operations/pid"/ -name *".pid" -mtime +7 -exec rm -f {} \;
    fi

    # Clean pool files older than 7 days
    if [ -d "$DATA_DIR/operations/pool/" ];then
        find "$DATA_DIR/operations/pool"/ -name *".json" -mtime +7 -exec rm -f {} \;
    fi

    # Clean temp mirror directories older than 7 days
    if [ -d "$REPOS_DIR" ];then
        find "$REPOS_DIR"/ -name "download-mirror-"* -type d -mtime +5 -exec rm -rf {} \;
    fi
}

# Check if a new version is available on Github
function checkVersion
{
    if [ ! -f "${DATA_DIR}/version.available" ];then
        touch "${DATA_DIR}/version.available"
        chown ${WWW_USER}:repomanager "${DATA_DIR}/version.available"
    fi

    curl -s -H 'Cache-Control: no-cache' "https://raw.githubusercontent.com/lbr38/repomanager/${UPDATE_BRANCH}/www/version" > ${DATA_DIR}/version.available
}

# Apply permissions on repos directories
function applyPerms
{
    find "$REPOS_DIR" -type d -print0 | xargs -r0 chmod 0770
    find "$REPOS_DIR" -type f -print0 | xargs -r0 chmod 0660
    chown -R ${WWW_USER}:repomanager "$REPOS_DIR"
}

# Generate daily stats on repos such as package count and repo's size
function statsGenerate
{
    if [ "$CURRENT_TIME" == "$LAST_TIME" ];then
        return
    fi

    # Exit the function if time != 00:00
    if [ "$CURRENT_TIME" != "00:00" ];then
        return
    fi

    # Generate stats for each repos
    /usr/bin/sudo -u "$WWW_USER" php "$WWW_DIR/tools/stats-generator.php"
}

# Start parsing of access log to generete statistics on clients accessing the repos 
function statsParseAccessLog
{
    # Checks that required variables are set and that files exist
    if [ -z "$STATS_ACCESS_LOG_FILE" ];then
        echo "Error: Cannot determine access log file to analyze." >> "$LOG"
        return
    fi

    if [ ! -f "$STATS_ACCESS_LOG_FILE" ];then
        echo "Error: Access log file '$STATS_ACCESS_LOG_FILE' not found." >> "$LOG"
        return
    fi

    if [ ! -f "$STATS_DB" ];then
        echo "Error: Database '$STATS_DB' not found." >> "$LOG"
        return
    fi

    if [ ! -f "/usr/bin/sqlite3" ];then
        echo "Error: '/usr/bin/sqlite3' not found." >> "$LOG"
        return
    fi

    # Do not start log analyze if an analyze is already running
    if [ "$STATS_LOG_PARSING_RUNNING" == "no" ];then
        # Loop that get every new lines in the 'STATS_ACCESS_LOG_FILE' file
        # New lines are parsed to get date, time, IP and request
        tail -n0 -F "$STATS_ACCESS_LOG_FILE" | \
        while read LINE; do
            if echo "$LINE" | grep -q -E 'urlgrabber|APT-CURL|APT-HTTP';then
                # If a repomanager release update is running, then wait to don't alter the database
                while [ -f "${DATA_DIR}/update-running" ]; do
                    sleep 2
                done
                # Parse the line and insert in database
                DATE=$(echo "$LINE" | awk '{print $4}' | sed 's/\[//g' | cut -d':' -f1 | sed 's|/|-|g')
                DATE=$(date -d "$DATE" +%Y-%m-%d)
                TIME=$(echo "$LINE" | awk '{print $4}' | cut -d':' -f2,3,4)
                SOURCE_IP=$(echo "$LINE" | awk '{print $1}')
                SOURCE_HOST=$(dig -x $SOURCE_IP +short)
                REQUEST=$(echo "$LINE" | awk '{print $6,$7,$8}')
                REQUEST_RESULT=$(echo "$LINE" | awk '{print $9}')
                /usr/bin/sqlite3 -cmd ".timeout 5000" -cmd ".log '$STATS_LOG'" "$STATS_DB" "INSERT INTO access (Date, Time, Source, IP, Request, Request_result) VALUES ('$DATE', '$TIME', '$SOURCE_HOST', '$SOURCE_IP', '$REQUEST', '$REQUEST_RESULT');"
            fi
        done &

        STATS_LOG_PARSING_RUNNING="yes"
    fi
}

# Clean old stats for each repos
function statsClean
{
    if [ ! -f "$STATS_DB" ];then
        echo "Error: Database '$STATS_DB' not found." >> "$LOG"
        return
    fi

    if [ ! -f "/usr/bin/sqlite3" ];then
        echo "Error: '/usr/bin/sqlite3' not found." >> "$LOG"
        return
    fi

    /usr/bin/sudo -u "$WWW_USER" php "$WWW_DIR/tools/stats-cleaner.php"
}

# Execute plans every minute
function execPlan
{
    if [ "$CURRENT_TIME" == "$LAST_TIME" ];then
        return
    fi        

    # Execute plans in background as www user
    /usr/bin/sudo -u "$WWW_USER" php "$WWW_DIR/operations/plan.php" 'exec' & > /dev/null
}

# Send plan reminder (every day at 00:00)
function sendPlanReminder
{
    if [ "$CURRENT_TIME" == "$LAST_TIME" ];then
        return
    fi

    # Exit the function if time != 00:00
    if [ "$CURRENT_TIME" != "00:00" ];then
        return
    fi

    # Execute plans in background as www user
    /usr/bin/sudo -u "$WWW_USER" php "$WWW_DIR/operations/plan.php" 'send-reminders' & > /dev/null
}

# Execution
while true; do

    # Clean log
    echo -n> "$LOG"

    # Get vars on every loop because their value can have been updated by user from the web interface
    getVars

    # Check that vars are defined
    generalChecks

    # Check if a restart of this service is needed
    checkRestartNeeded

    # Execute actions on service start (COUNTER = 0) and then every hour (COUNTER = 720)
    # 3600 / 5sec (sleep 5) = 720
    if [ "$COUNTER" -eq "0" ] || [ "$COUNTER" -eq "720" ];then
        # Check version
        checkVersion

        # Cleanup files
        cleanUp

        if [ "$STATS_ENABLED" == "yes" ];then
            # Clean old statistics
            statsClean
        fi

        # Reset counter
        COUNTER="0"
    fi

    CURRENT_TIME=$(date +%H:%M)

    # Parse access logs to generate stats (if enabled)
    if [ "$STATS_ENABLED" == "yes" ];then
        statsGenerate
        statsParseAccessLog
    fi

    # Execute plans (if plan enabled)
    if [ "$PLANS_ENABLED" == "yes" ];then
        execPlan
    fi

    # Send plans reminder (if plan and plan reminders enabled)
    if [ "$PLANS_ENABLED" == "yes" ] && [ "$PLAN_REMINDERS_ENABLED" == "yes" ];then
        sendPlanReminder
    fi

    LAST_TIME=$(date +%H:%M)

    sleep 5

    (( COUNTER++ ))
done

exit