#!/bin/bash
set -u
export TERM="xterm-256color"
export COLUMNS=190
export GPG_TTY=$(tty)

# Main variables
OS_FAMILY=""
WWW_DIR=""
WWW_USER=""
WWW_HOSTNAME=""
DATA_DIR="/var/lib/repomanager"
GPGHOME="${DATA_DIR}/.gnupg"
CONF="${DATA_DIR}/configurations/repomanager.conf"
RELEASEVER=""
REPOS_DIR=""
CONFIRM=""
CHECK_DEP=""
PACKAGE_TYPE=""

RPM_REPO="disabled"
RPM_SIGN_PACKAGES="no"
RPM_SIGN_METHOD="rpmsign"
DEB_REPO="disabled"
DEB_SIGN_REPO="no"
GPG_KEYID=""

REPOMANAGER_APT_DIR="/etc/apt/"

PROCEED_INSTALLATION="0"
PROCEED_DEPENDENCIES="0"
PROCEED_PERMISSIONS="0"

# Colors
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)
PWD=$(pwd)

# User detection
if [ "$(id -u)" -ne "0" ];then
    echo -e "\n${YELLOW}Must be executed with sudo${RESET}\n"
    exit
fi

## ↓ FUNCTIONS ↓ ##

# print help
function help
{ 
    echo -e "\n   Available parameters:"
    echo -e "   -i | --install          ➤  Execute repomanager installation wizard."
    echo -e "   -p | --set-permissions  ➤  Set permissions on repomanager directories and files."
    echo -e "   -d | --check-deps       ➤  Check and install missing dependencies."
    echo -e "   -s | --deploy-service   ➤  Deploy repomanager service.\n\n\n"
}

# System check
function checkSystem
{
    # /etc/os-release is present on most of the recent OS and is a good way to get OS informations
    if [ -f "/etc/os-release" ];then
        if grep -q "^ID_LIKE=" /etc/os-release;then
            OS_FAMILY=$(grep "^ID_LIKE=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        elif grep -q "^ID=" /etc/os-release;then
            OS_FAMILY=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        fi

        # # If ID_LIKE and ID are both present in /etc/os-release then ID_LIKE has priority
        # if egrep -q "^ID_LIKE=" /etc/os-release && egrep -q "^ID=" /etc/os-release;then
        #     OS_FAMILY=$(grep "^ID_LIKE=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        # fi

        if [ -z "$OS_FAMILY" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS family"
            exit
        fi

        # If OS_FAMILY has one of the following pattern then is it Redhat family
        if echo "$OS_FAMILY" | egrep -q -i 'rhel|centos|fedora';then
            OS_FAMILY="Redhat"
        fi

        # If OS_FAMILY has one of the following pattern then is it Debian family
        if echo "$OS_FAMILY" | egrep -q -i 'debian|ubuntu|kubuntu|xubuntu|armbian|mint';then
            OS_FAMILY="Debian"
        fi

        # If OS_FAMILY is neither Redhat or Debian family then this OS is not supported
        if ! echo "$OS_FAMILY" | egrep -q -i 'Redhat|Debian';then
            echo -e "[${YELLOW} ERROR ${RESET}] Unsupported OS ($OS_FAMILY)"
            exit
        fi

        # Get OS name and version from /etc/os-release
        OS_NAME=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        OS_VERSION=$(grep "^VERSION_ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')

        if [ -z "$OS_NAME" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS name"
            exit
        fi
        if [ -z "$OS_VERSION" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS version"
            exit
        fi
    fi

    # Case /etc/os-release does not exist
    if [ ! -f "/etc/os-release" ];then
        # If apt is present then it is Debian family
        if [ -f "/usr/bin/apt" ];then
            OS_FAMILY="Debian"
        fi
		# If yum or dnf is present then it is Redhat family
        if [ -f "/usr/bin/yum" ] || [ -f "/usr/bin/dnf" ];then
            OS_FAMILY="Redhat"
        fi

        # At this point if OS_FAMILY is empty then it is an unsupported OS
        if [ -z "$OS_FAMILY" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unsupported OS Family (unknown OS family)"
            exit
        fi

		# Try to get OS name and version

        # /usr/bin/lsb_release is only present on Debian based distributions
        if [ -f "/usr/bin/lsb_release" ];then
            OS_NAME=$(lsb_release -a 2> /dev/null | grep 'Distributor ID:' | awk '{print $NF}')
            OS_VERSION=$(lsb_release -a 2> /dev/null | grep 'Release:' | awk '{print $NF}')
        fi
        # Last chance for Fedore/Redhat based distributions
        # If /etc/centos-release exists, then is is CentOS
        if [ -f "/etc/centos-release" ];then
            OS_NAME="CentOS"
            OS_VERSION=$(rpm --eval '%{centos_ver}')
        fi
        # If /etc/fedora-release exists, then it is Fedora
        if [ -f "/etc/fedora-release" ];then
            OS_NAME="Fedora"
            OS_VERSION=$(cat /etc/os-release | grep "VERSION_ID" | cut -d'=' -f2 | sed 's/"//g')
        fi

        # Quits if nothing as been found at this point
        if [ -z "$OS_NAME" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS name"
            exit
        fi 
        if [ -z "$OS_VERSION" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS version"
            exit
        fi
    fi
}

# Set correct permissions on all directories and files used by repomanager
function permissions
{
    ACTUAL_USER=$(whoami)

    # If /var/www/repomanager does not exist, ask for the installation location
    if [ ! -d "/var/www/repomanager" ];then
        if [ -z "$WWW_DIR" ];then
            echo -ne "➤ Repomanager files location (default is /var/www/repomanager) : "; read -p "" WWW_DIR
            if [ -z "$WWW_DIR" ];then
                WWW_DIR="/var/www/repomanager"
            fi
        fi
    else
        WWW_DIR="/var/www/repomanager"
    fi

    echo -ne "${YELLOW} Setting permissions... ${RESET}"

    if [ ! -d "$WWW_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] $WWW_DIR does not exist"
        exit
    fi

    if [ ! -d "$DATA_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] $DATA_DIR does not exist"
        exit
    fi

    if [ ! -f "$CONF" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot find the main configuration file '$CONF'"
        exit
    fi

    # Getting some variable from main config file
    REPOS_DIR=$(grep "^REPOS_DIR =" "$CONF" | cut -d'=' -f2 | sed 's/"//g' | sed 's/ //g')
    if [ -z "$REPOS_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot determine repos directory"
        exit
    fi
    WWW_USER=$(grep "^WWW_USER =" "$CONF" | cut -d'=' -f2 | sed 's/"//g' | sed 's/ //g')
    if [ -z "$WWW_USER" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot determine webserver user"
        exit
    fi
    WWW_HOSTNAME=$(grep "^WWW_HOSTNAME =" "$CONF" | cut -d'=' -f2 | sed 's/"//g' | sed 's/ //g')
    if [ -z "$WWW_HOSTNAME" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot determine repomanager URL"
        exit
    fi
 
    # Setting permissions only if sudo/root
    if [ "$ACTUAL_USER" == "root" ];then
        # Permissions on web directory
        find "$WWW_DIR" -type f -exec chmod 0660 {} \;
        find "$WWW_DIR" -type d -exec chmod 0770 {} \;
        chmod 750 "$WWW_DIR"
        chown -R ${WWW_USER}:repomanager "$WWW_DIR"
        # Permissions on data directory
        find "$DATA_DIR" -type f -exec chmod 0660 {} \;
        find "$DATA_DIR" -type d -exec chmod 0770 {} \;
        chmod 750 "$DATA_DIR"
        chown -R ${WWW_USER}:repomanager "$DATA_DIR"
        chmod 550 ${DATA_DIR}/repomanager
        chmod 500 ${DATA_DIR}/tools/service/repomanager-service

        # Permissions on repos directory
        # No chmod here because it can be a large directory and it could take too much time. The repomanager service will take care of it.
        chown -R ${WWW_USER}:repomanager "$REPOS_DIR"

        # Permissions on .gnupg directory
        if [ -d "$GPGHOME" ];then
            chown -R ${WWW_USER}:repomanager $GPGHOME
            chmod 700 $GPGHOME
            # Permissions on passphrase
            if [ -f "${GPGHOME}/passphrase" ];then 
                chmod 400 ${GPGHOME}/passphrase
            fi
        fi
        # Permissions on GPG public key
        if [ -f "${REPOS_DIR}/${WWW_HOSTNAME}.pub" ];then
            chown ${WWW_USER}:repomanager ${REPOS_DIR}/${WWW_HOSTNAME}.pub
            chmod 440 ${REPOS_DIR}/${WWW_HOSTNAME}.pub
        fi

        # Permissions on perl's module rpmresign (perl/RPM4)
        # Setting permission to allow WWW_USER to pass through the following RPM4 directories
        if [ -d "/usr/local/lib64/perl5/RPM4/" ];then
            chmod o+rx /usr/local/lib64/perl5/RPM4
            find /usr/local/lib64/perl5/RPM4/ -type d -exec chmod o+rx {} \;
            find /usr/local/lib64/perl5/RPM4/ -type f -exec chmod o+r {} \;
        fi
        if [ -d "/usr/local/lib64/perl5/auto" ];then 
            chmod o+rx /usr/local/lib64/perl5/auto
        fi
        if [ -d "/usr/local/lib64/perl5/auto/RPM4" ];then
            chmod o+rx /usr/local/lib64/perl5/auto/RPM4
        fi
        if [ -d "/usr/local/lib64/perl5" ];then
            chmod o+rx /usr/local/lib64/perl5
        fi
        if [ -f "/usr/local/lib64/perl5/RPM4.pm" ];then
            chmod o+r /usr/local/lib64/perl5/RPM4.pm
        fi
    fi
    echo -e "${GREEN}OK${RESET}\n"
}

# Ask for the package type
function getPackageType
{
    while [ -z "$PACKAGE_TYPE" ];do
        echo -ne "➤ What package type(s) will this server manage? ('deb' / 'rpm' or 'all'): "; read -p "" PACKAGE_TYPE
    done

    if [ "$PACKAGE_TYPE" != "rpm" ] && [ "$PACKAGE_TYPE" != "deb" ] && [ "$PACKAGE_TYPE" != "all" ];then
        echo -e "${YELLOW}Unsupported package type${RESET}"
        exit
    fi
}

# Check and install missing dependencies
function checkDependencies
{
    getPackageType

    echo -e "\nChecking dependencies..."

    ## Redhat ##
    if [ "$OS_FAMILY" == "Redhat" ];then
        CHECK_DEP=$(rpm -qa curl)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing curl\t" &&
            yum install curl -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa findutils)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing findutils\t" &&
            yum install findutils -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa gnupg2)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing gnupg2\t" &&
            yum install gnupg2 -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa sudo)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing sudo\t" &&
            yum install sudo -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa git)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing git\t" &&
            yum install git -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi

    ## Debian ##
    if [ "$OS_FAMILY" == "Debian" ];then
        CHECK_DEP=$(dpkg --list | grep "^ii  curl ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing curl\t" &&
            apt-get -qq install curl -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  findutils ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing findutils\t" &&
            apt-get -qq install findutils -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  sudo ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing sudo\t" &&
            apt-get -qq install sudo -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  git ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing git\t" &&
            apt-get -qq install git -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  gnupg2 ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing gnupg2\t" &&
            apt-get -qq install gnupg2 -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi

    ## Additionnal dependencies ##

    # If this server will mirror / serve rpm packages, install those additionnal deps

    if [ "$PACKAGE_TYPE" == "rpm" ] || [ "$PACKAGE_TYPE" == "all" ];then
        if [ "$OS_FAMILY" == "Redhat" ];then
            CHECK_DEP=$(rpm -qa rpm-sign)
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing rpm-sign\t" &&
                yum install rpm-sign -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
            CHECK_DEP=$(rpm -qa createrepo_c)
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing createrepo_c\t" &&
                yum install createrepo_c -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi

        if [ "$OS_FAMILY" == "Debian" ];then
            CHECK_DEP=$(dpkg --list | grep "^ii  rpm ")
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing rpm\t" &&
                apt-get -qq install rpm -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
            
            # librpmsign package has different name depending on the Debian version

            if [ "$OS_VERSION" == "10" ];then
                CHECK_DEP=$(dpkg --list | grep "^ii  librpmsign8 ")
                if [ -z "$CHECK_DEP" ];then
                    echo -ne "Installing librpmsign8\t" &&
                    apt-get -qq install librpmsign8 -y > /dev/null &&
                    echo -e "[${GREEN} OK ${RESET}]"
                fi
            fi

            if [ "$OS_VERSION" == "11" ];then
                CHECK_DEP=$(dpkg --list | grep "^ii  librpmsign9 ")
                if [ -z "$CHECK_DEP" ];then
                    echo -ne "Installing librpmsign9\t" &&
                    apt-get -qq install librpmsign9 -y > /dev/null &&
                    echo -e "[${GREEN} OK ${RESET}]"
                fi
            fi

            # createrepo package has different name depending on the Debian version

            # If Debian 10
            if [ "$OS_VERSION" == "10" ];then
                CHECK_DEP=$(dpkg --list | grep "^ii  createrepo ")
                if [ -z "$CHECK_DEP" ];then
                    echo -ne "Installing createrepo\t" &&
                    apt-get -qq install createrepo -y > /dev/null &&
                    echo -e "[${GREEN} OK ${RESET}]"
                fi
            fi

            # If Debian 11
            if [ "$OS_VERSION" == "11" ];then
                CHECK_DEP=$(dpkg --list | grep "^ii  createrepo-c ")
                if [ -z "$CHECK_DEP" ];then
                    echo -ne "Installing createrepo-c\t" &&
                    apt-get -qq install createrepo-c -y > /dev/null &&
                    echo -e "[${GREEN} OK ${RESET}]"
                fi
            fi
        fi

        # Check gnupg2 version and install 'RPM4' perl module if gpg version does not support non-interactive package signature
        if [ ! -f "/usr/bin/gpg2" ];then
            echo -e "  [$YELLOW ERROR $RESET] Cannot find gnupg2 binary."
            exit
        fi

        GPG_VERSION=$(/usr/bin/gpg2 --version | head -n1 | awk '{print $3}')

        # Gnupg2 version must be at least 2.1.x to be able to correctly sign packages. If not then build RPM4 module.
        if ! echo "$GPG_VERSION" | egrep -q "^2.1.|^2.2.";then

            if [ "$OS_FAMILY" == "Redhat" ];then
                if [ ! -f "/usr/bin/rpmresign" ];then
                    echo -ne "Installing RPM4 perl module (rpmresign) from CPAN\t" &&
                    yum install gcc perl-devel rpm-devel perl-CPAN perl-App-cpanminus -y > /dev/null &&
                    cpanm PkgConfig --force &&
                    cpanm RPM4 --force && 
                    ln -s /usr/local/bin/rpmresign /usr/bin/rpmresign &&
                    echo -e "[${GREEN} OK ${RESET}]"
                    RPM_SIGN_METHOD="rpmresign"
                fi
            fi

            if [ "$OS_FAMILY" == "Debian" ];then
                echo -e "[$YELLOW ERROR $RESET] Gnupg2 version is too old, RPM package signature is not possible."
                exit
            fi
        fi
    fi

    # If this server will mirror / serve deb packages, install those additionnal deps
    if [ "$PACKAGE_TYPE" == "deb" ] || [ "$PACKAGE_TYPE" == "all" ];then

        if [ "$OS_FAMILY" == "Redhat" ];then
            # Installing epel repo to get reprepro package
            CHECK_DEP=$(rpm -qa epel-release)
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing epel-release\t" &&
                yum install epel-release -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi

            yum clean all -q

            CHECK_DEP=$(rpm -qa reprepro)
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing reprepro\t" &&
                yum install reprepro -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi

        if [ "$OS_FAMILY" == "Debian" ];then
            CHECK_DEP=$(dpkg --list | grep "^ii  reprepro ")
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing reprepro\t" &&
                apt-get -qq install reprepro -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi
    fi
}

# Deploy repomanager systemd service
function deployService
{
    # Exit function if datadir directory does not exist
    if [ ! -d "$DATA_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot find ${YELLOW}${DATA_DIR}${RESET} directory..."
        return
    fi

    # Exit function if services files cannot be found
    if [ ! -f "${DATA_DIR}/tools/service/repomanager.systemd.template" ];then
        echo -e "[$YELLOW ERROR $RESET] Systemd template service file ${YELLOW}${DATA_DIR}/tools/service/repomanager.systemd.template${RESET} does not exist..."
        return
    fi
    if [ ! -f "${DATA_DIR}/tools/service/repomanager-service" ];then
        echo -e "[$YELLOW ERROR $RESET] Repomanager service script ${YELLOW}${DATA_DIR}/tools/service/repomanager-service${RESET} does not exist..."
        return
    fi

    # Deploy systemd service template file
    echo -ne "\n➤ Deploying service... "
    \cp "$DATA_DIR/tools/service/repomanager.systemd.template" /lib/systemd/system/repomanager.service &&
    ln -fs /lib/systemd/system/repomanager.service /etc/systemd/system/repomanager.service &&
    chmod 700 "${DATA_DIR}/tools/service/repomanager-service"
    echo -e "${GREEN}Done${RESET}"

    systemctl daemon-reload --quiet
    systemctl enable repomanager --quiet

    echo -n "  Start repomanager service now (yes/no): "; read -p "" CONFIRM
    if [ "$CONFIRM" == "yes" ];then
        systemctl start repomanager --quiet
        if [ "$?" != "0" ];then
            echo -e "[$YELLOW ERROR $RESET] Starting repomanager service has failed"
        fi
    fi
}

# Installation wizard
function installation
{
    echo -e " ${YELLOW}Welcome to Repomanager setup wizard${RESET}\n"

    getPackageType

    if [ "$PACKAGE_TYPE" == "rpm" ] || [ "$PACKAGE_TYPE" == "all" ];then

        RPM_REPO="enabled"

        if [ "$OS_FAMILY" == "Redhat" ];then
            RELEASEVER="$OS_VERSION"
        fi

        if [ "$OS_FAMILY" == "Debian" ];then
            while [ -z "$RELEASEVER" ];do
                echo -ne "  Please, specify the RHEL/CentOS release version (releasever) this reposerver will mirror and/or serve packages for (e.g. 7, 8...): "; read -p "" RELEASEVER
            done
        fi
    fi

    if [ "$PACKAGE_TYPE" == "rpm" ] || [ "$PACKAGE_TYPE" == "all" ];then
        DEB_REPO="enabled"
    fi

    #### DEPENDENCIES ####

    checkDependencies

    #### INSTALLATION ####

    echo -e "➤ Repomanager data files will be stored in ${DATA_DIR}/."
    echo -e "${YELLOW}Please do not remove or move this directory and be sure to make daily backup of this directory.${RESET}"

    ## Repomanager web files installation location
    if [ -z "$WWW_DIR" ];then
        echo -e "\n➤ Repomanager web sources installation path (default is /var/www/repomanager)"
        echo -e "  ${YELLOW}You will have to set up a vhost to serve this location.${RESET}"
        echo -n "  Leave empty to use default path or specify a location: "; read -p "" WWW_DIR

        if [ -z "$WWW_DIR" ];then
            WWW_DIR="/var/www/repomanager"
        fi
    fi

    if [ -d "$WWW_DIR" ];then
        echo -n "  Webdir ${YELLOW}${WWW_DIR}${RESET} already exists, its content will be deleted. Confirm (yes/no): "; read -p "" CONFIRM
        if [ "$CONFIRM" != "yes" ];then
            exit
        fi
    fi

    if [ -d "$DATA_DIR" ];then
        echo -n "  Datadir ${YELLOW}${DATA_DIR}${RESET} already exists, its content will be deleted. Confirm (yes/no): "; read -p "" CONFIRM
        if [ "$CONFIRM" != "yes" ];then
            exit
        fi
    fi
    
    # Delete webdir and datadir content
    rm "$WWW_DIR" -rf
    rm "$DATA_DIR" -rf

    # Create webdir and datadir
    mkdir -p "$WWW_DIR"
    mkdir -p "$DATA_DIR"

    ## Repos directory
    if [ -z "$REPOS_DIR" ];then
        echo -e "\n➤ Repos storage path (default is /home/repo)"
        echo -e "  ${YELLOW}This directory's size can grow large depending on your usage. Be sure to allow sufficiant disk space on this location.${RESET}"
        echo -n "  Leave empty to use default path or specify a location: "; read -p "" REPOS_DIR

        if [ -z "$REPOS_DIR" ];then
            REPOS_DIR="/home/repo"
        fi

        if [ -d "$REPOS_DIR" ];then
            echo -n "  $REPOS_DIR already exist, its content will be deleted. Confirm (yes/no): "; read -p "" CONFIRM
            if [ "$CONFIRM" != "yes" ];then
                echo "Exiting..."
                exit
            fi
        fi
    fi

    # Delete repo dir content
    rm "$REPOS_DIR" -rf

    # Create repo dir if not exist
    mkdir -p "$REPOS_DIR"

    # Create main directories
    mkdir -p "${DATA_DIR}/configurations/"
    mkdir -p "${DATA_DIR}/.gnupg/"
    mkdir -p "${DATA_DIR}/logs/"
    mkdir -p "${DATA_DIR}/logs/main/"
    mkdir -p "${DATA_DIR}/logs/service/"
    mkdir -p "${DATA_DIR}/logs/stats/"

    # Copy web sources
    cp -r ${PWD}/www/* ${WWW_DIR}/

    # Copy scripts and tools to datadir
    cp -r ${PWD}/tools ${DATA_DIR}/

    # Copy this script
    cp ${PWD}/repomanager ${DATA_DIR}/repomanager


    #### CONFIGURATION ####

    ## Webserver user
    # Try to detect web user
    WWW_USER=""
    if grep -q "^nginx:" /etc/passwd;then
        WWW_USER="nginx"
    elif grep -q "^www-data:" /etc/passwd;then
        WWW_USER="www-data"
    elif grep -q "^apache:" /etc/passwd;then
        WWW_USER="apache"
    fi
    # Si more than one web users are detected then variable is leaved empty. User will have to manualy specify which web user to use.
    if egrep -q "^nginx:" /etc/passwd && egrep -q "^www-data:" /etc/passwd && egrep -q "^apache:" /etc/passwd;then
        WWW_USER=""
    fi

    if [ ! -z "$WWW_USER" ];then
        echo -e "\n➤ Specifying webserver user (detected: $WWW_USER)"
        echo -ne "  Leave empty to use ${YELLOW}${WWW_USER}${RESET} or specify a user: "; read -p "" PROMPT
        if [ ! -z "$PROMPT" ];then
            WWW_USER="$PROMPT"
        fi
    else
        while [ -z "$WWW_USER" ];do
            echo -ne "\n➤ Specifying webserver user (generally nginx or www-data): "; read -p "" WWW_USER
        done
    fi

    while [ -z "$WWW_HOSTNAME" ];do
        echo -ne "\n➤ Specifying what will be Repomanager URL: "; read -p "https://" WWW_HOSTNAME
    done

    ## GPG
    echo -e "\n➤ Repomanager can sign packages or repositories using a GPG key."

    echo -e "  This wizard can generate a new key for you inside repomanager's GPG keychain."
    echo -ne "  Generate a new key now (recommended) (yes/no): "; read -p "" CONFIRM

    if [ "$CONFIRM" == "yes" ] || [ "$CONFIRM" == "y" ];then
        # To ask wizard to generate a key
        GENERATE_A_KEY_FOR_ME="yes"
        if [ "$PACKAGE_TYPE" == "rpm" ] || [ "$PACKAGE_TYPE" == "all" ];then
            RPM_SIGN_PACKAGES="yes"
        fi
        if [ "$PACKAGE_TYPE" == "deb" ] || [ "$PACKAGE_TYPE" == "all" ];then
            DEB_SIGN_REPO="yes"
        fi
        GPG_KEYID=""
        PASSPHRASE=""
        PASSPHRASE_FILE="${GPGHOME}/passphrase"

        # 'private-keys-v1.d' directory must exists or gnupg will print warning
        mkdir -p "${GPGHOME}/private-keys-v1.d/"
        
        # Check if a key already exist in the keychain
        # Case it already exist:
        if gpg2 --homedir $GPGHOME --no-permission-warning --list-key 2>/dev/null | egrep -q "^pub|^sub|";then
            echo -ne " One or more GPG key are present in Repomanager keychain (${GPGHOME}). Print and use existing key(s) (yes/no): " CONFIRM
            if [ "$CONFIRM" == "yes" ] || [ "$CONFIRM" == "y" ];then
                gpg2 --homedir $GPGHOME --no-permission-warning --list-key 2>/dev/null
                echo -ne "\n Use one the printed key (yes/no) : " CONFIRM
                if [ "$CONFIRM" == "yes" ] || [ "$CONFIRM" == "y" ];then
                    # Disable key generation because the user choosed to use an existing key
                    GENERATE_A_KEY_FOR_ME="no"
                    while [ -z "$GPG_KEYID" ];do
                        echo -ne "➤ Specify the email Id related to the key you want to use: "; read -p "" GPG_KEYID
                    done
                    while [ -z "$PASSPHRASE" ];do
                        echo -ne "➤ Specify the key passphrase: "; read -s PASSPHRASE
                    done
                fi
            fi
        fi

        # Case a key will be generated
        if [ "$GENERATE_A_KEY_FOR_ME" == "yes" ];then
            echo -e "$YELLOW  You must specify all the asked informations below:$RESET"
            # Initialize variables used to generate a new key.
            key_length=""
            key_name=""
            key_description=""
            key_email=""
            key_passphrase=""

            # Asking all the needed informations to generate a key.
            while [ -z "$key_length" ];do
                read -p "  Key size (1024 / 2048 / 4096): " key_length
            done
            while [ -z "$key_name" ];do
                read -p "  Name: " key_name
            done
            while [ -z "$key_description" ];do
                read -p "  Description: " key_description
            done
            while [ -z "$key_email" ];do
                read -p "  Email: " key_email
            done
            while [ -z "$key_passphrase" ];do
                read -s -p "  Passphrase: " key_passphrase
            done
            echo ""

            mkdir -p "$GPGHOME" &&
            cd "$GPGHOME" &&

            echo "Key-Type: RSA" > gpg-template-file
            echo "Key-Length: ${key_length}" >> gpg-template-file
            echo "Key-Usage: sign" >> gpg-template-file
            echo "Name-Real: ${key_name}" >> gpg-template-file
            echo "Name-Comment: ${key_description}" >> gpg-template-file
            echo "Name-Email: ${key_email}" >> gpg-template-file
            echo "Expire-Date: 0" >> gpg-template-file
            echo "Passphrase: ${key_passphrase}" >> gpg-template-file &&
            gpg2 --batch --gen-key --homedir ${GPGHOME} --no-permission-warning gpg-template-file 2>/dev/null &&

            echo -e "  GPG key generation [$GREEN OK $RESET]\n"
            rm gpg-template-file -f

            echo "$key_passphrase" > "$PASSPHRASE_FILE"
            GPG_KEYID="$key_email"
        fi

        # Additionnal configuration for GPG

        # Create rpm macros file
        if [ "$PACKAGE_TYPE" == "rpm" ] || [ "$PACKAGE_TYPE" == "all" ];then
            mkdir -p "${DATA_DIR}/.rpm"
            echo "%__gpg /usr/bin/gpg2" > "$DATA_DIR/.rpm/.mcs"
            echo "%_gpg_path $GPGHOME" >> "$DATA_DIR/.rpm/.mcs"
            echo "%_gpg_name $GPG_KEYID" >> "$DATA_DIR/.rpm/.mcs"
            echo "%_gpg_passphrase_file $PASSPHRASE_FILE" >> "$DATA_DIR/.rpm/.mcs"
            echo "%__gpg_sign_cmd %{__gpg} gpg --no-verbose --no-armor --batch --pinentry-mode loopback --passphrase-file %{_gpg_passphrase_file} %{?_gpg_digest_algo:--digest-algo %{_gpg_digest_algo}} --no-secmem-warning -u \"%{_gpg_name}\" -sbo %{__signature_filename} %{__plaintext_filename}" >> "$DATA_DIR/.rpm/.mcs"
        fi
        # Additionnal gpg configuration for reprepro
        if [ "$PACKAGE_TYPE" == "deb" ] || [ "$PACKAGE_TYPE" == "all" ];then
            echo "pinentry-mode loopback" > ${GPGHOME}/gpg.conf
            echo "passphrase-file $PASSPHRASE_FILE" >> ${GPGHOME}/gpg.conf
        fi

        # Export generated keyring's public key
        mkdir -p ${REPOS_DIR}/gpgkeys/
        gpg2 --no-permission-warning --homedir "$GPGHOME" --export -a "$GPG_KEYID" > ${REPOS_DIR}/gpgkeys/${WWW_HOSTNAME}.pub 2>/dev/null
    else
        RPM_SIGN_PACKAGES="no"
        DEB_SIGN_REPO="no"
    fi

    echo -e "   ${YELLOW}\nConfiguring repomanager...${RESET}"

    # Generating repomanager.conf with specified values
    echo "[PATHS]" > $CONF
    echo "WWW_DIR = \"$WWW_DIR\"" >> $CONF
    echo "REPOS_DIR = \"$REPOS_DIR\"" >> $CONF

    echo -e "\n[CONFIGURATION]" >> $CONF
    echo "EMAIL_DEST = \"\"" >> $CONF
    echo "MANAGE_HOSTS = \"no\"" >> $CONF
    echo "MANAGE_PROFILES = \"no\"" >> $CONF
    echo "REPO_CONF_FILES_PREFIX = \"repomanager-\"" >> $CONF
    echo "BACKUP_DIR = \"${DATA_DIR}/backups\"" >> $CONF
    echo "DEBUG_MODE = \"disabled\"" >> $CONF
    
    echo -e "\n[RPM]" >> $CONF
    echo "RPM_REPO = \"${RPM_REPO}\"" >> $CONF
    echo "RPM_SIGN_PACKAGES = \"${RPM_SIGN_PACKAGES}\"" >> $CONF
    echo "RPM_SIGN_GPG_KEYID = \"$GPG_KEYID\"" >> $CONF
    echo "RPM_SIGN_METHOD = \"$RPM_SIGN_METHOD\"" >> $CONF
    if [ "$PACKAGE_TYPE" == "rpm" ] || [ "$PACKAGE_TYPE" == "all" ];then
        echo "RELEASEVER = \"$RELEASEVER\"" >> $CONF
    else
        echo "RELEASEVER = \"\"" >> $CONF
    fi
    echo "RPM_DEFAULT_ARCH = \"\"" >> $CONF
    echo "RPM_INCLUDE_SOURCE = \"no\"" >> $CONF

    echo -e "\n[DEB]" >> $CONF
    echo "DEB_REPO = \"${DEB_REPO}\"" >> $CONF
    echo "DEB_SIGN_REPO = \"${DEB_SIGN_REPO}\"" >> $CONF
    echo "DEB_SIGN_GPG_KEYID = \"$GPG_KEYID\"" >> $CONF
    echo "DEB_DEFAULT_ARCH = \"\"" >> $CONF
    echo "DEB_INCLUDE_SOURCE = \"no\"" >> $CONF
    echo "DEB_DEFAULT_TRANSLATION = \"\"" >> $CONF

    echo -e "\n[UPDATE]" >> $CONF
    echo "UPDATE_AUTO = \"no\"" >> $CONF
    echo "UPDATE_BACKUP_ENABLED = \"yes\"" >> $CONF
    echo "UPDATE_BRANCH = \"stable\"" >> $CONF

    echo -e "\n[WWW]" >> $CONF
    echo "WWW_USER = \"$WWW_USER\"" >> $CONF
    echo "WWW_HOSTNAME = \"$WWW_HOSTNAME\"" >> $CONF
    echo "WWW_REPOS_DIR_URL = \"https://${WWW_HOSTNAME}/repo\"" >> $CONF

    echo -e "\n[PLANS]" >> $CONF
    echo "PLANS_ENABLED = \"no\"" >> $CONF
    echo "PLAN_REMINDERS_ENABLED = \"no\"" >> $CONF
    echo "ALLOW_AUTOUPDATE_REPOS = \"no\"" >> $CONF
    echo "ALLOW_AUTOUPDATE_REPOS_ENV = \"no\"" >> $CONF
    echo "ALLOW_AUTODELETE_ARCHIVED_REPOS = \"no\"" >> $CONF
    echo "RETENTION = \"2\"" >> $CONF

    echo -e "\n[STATS]" >> $CONF
    echo "STATS_ENABLED = \"no\"" >> $CONF
    echo "STATS_LOG_PATH = \"\"" >> $CONF

    # Create repomanager group
    if ! grep -q "repomanager" /etc/group;then
        groupadd repomanager
    fi

    # Webserver user is added to the group members
    usermod -G repomanager "$WWW_USER"

    # Create symlink to repomanager executable
    ln -sf /var/lib/repomanager/repomanager /usr/bin/repomanager 

    echo -e "\n➤ Repomanager is using a systemd service to execute regular tasks, such as:"
    echo "  - checking for new version availability"
    echo "  - generating repos access statistics (if enabled)"
    echo -ne "\n  Deploy Repomanager's service now (yes/no): "; read -p "" CONFIRM
    if [ "$CONFIRM" == "yes" ];then
        deployService
    fi

    echo -e "\n ${GREEN}Installation success!${RESET}"
    echo -e " Before using all Repomanager features, be sure to complete installation on: ${YELLOW}https://${WWW_HOSTNAME}/configuration.php${RESET}"
    echo -e " Login     :  ${YELLOW}admin${RESET}"
    echo -e " Password  :  ${YELLOW}repomanager${RESET}\n"
}

echo '

 ______  ____ ______   ____   _____ _____   ____  _____    ____   ___________
 \_  _ \/ __ \\____ \ /  _ \ /     \\__  \ /     \\__  \  / ___\_/ __ \_  __ \
 |  | \|  ___/|  |_> )  (_) )  Y Y  \/ __ \|   |  \/ __ \/ /_/  >  ___/|  | \/
 |__|   \___  >   __/ \____/|__|_|  (____  /___|  (____  |___  / \___  >__|
            \/|__|                \/     \/     \/     \/_____/      \/
           
'

while [ $# -ge 1 ];do
    case "$1" in
        --help|-help|-h)
            help
            exit
           ;;
        --first-install|--install|-i)
            PROCEED_INSTALLATION="1"
        ;;
        --set-permissions|--permissions|-p)
            PROCEED_PERMISSIONS="1"
        ;;
        --check-deps|-d)
            PROCEED_DEPENDENCIES="1"
        ;;
        --deploy-service|-s)
            deployService
            exit
        ;;
        --package-type)
            PACKAGE_TYPE="$2"
            shift
        ;;
        *)
            echo "Unknown parameter: $1"
            help
            exit
        ;;
    esac
    shift
done

if [ "$PROCEED_INSTALLATION" == "1" ];then
    checkSystem
    installation
    permissions
    exit
fi

if [ "$PROCEED_DEPENDENCIES" == "1" ];then
    checkSystem
    checkDependencies
    exit
fi

if [ "$PROCEED_PERMISSIONS" == "1" ];then
    permissions
    exit
fi



help

exit